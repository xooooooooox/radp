<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.4</version>
		<relativePath /> <!-- lookup parent from the repository -->
	</parent>
	<groupId>space.x9x.radp</groupId>
	<artifactId>radp</artifactId>
	<version>3.23-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>${project.artifactId}</name>
	<description>Rapid Application Development Platform</description>
	<url>https://github.com/xooooooooox/radp</url>

	<modules>
		<module>radp-agents</module>
		<module>radp-components</module>
		<module>radp-plugins</module>
		<module>radp-archetypes</module>
		<module>radp-tests</module>
	</modules>

	<properties>
		<!-- project info -->
		<scm.git.web_url>https://github.com/xooooooooox/radp.git</scm.git.web_url>
		<scm.git.url>git@github.com:xooooooooox/radp.git</scm.git.url>
		<scm.issue.url>https://github.com/xooooooooox/radp/issues</scm.issue.url>
		<developer.id>x9x</developer.id>
		<developer.name>xooooooooox</developer.name>
		<developer.email>xozozsos@gmail.com</developer.email>

		<!-- build -->
		<java.version>17</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<flattened.filename>.flatten-pom-xml</flattened.filename>
		<javadoc.encoding>${project.build.sourceEncoding}</javadoc.encoding>
		<central.server.id>central-portal</central.server.id>
		<user.archetype.catalog.upload.url />
		<user.archetype.catalog.upload.serverId />
		<user.gpg.keyname />
		<user.minio.alias />
		<user.minio.bucket.path />
		<user.docker.build.registry />
		<user.docker.build.base_image />
		<user.jasypt.encryptor.password />
		<!-- checkstyle -->
		<checkstyle.base.dir>.coding/checkstyle</checkstyle.base.dir>
		<checkstyle.config.location>.coding/checkstyle/checkstyle.xml</checkstyle.config.location>
		<checkstyle.property.expansion>config_loc=${checkstyle.base.dir}</checkstyle.property.expansion>
		<!-- wrapper -->
		<wrapper.maven.version>3.9.9</wrapper.maven.version>
		<wrapper.distribution.type>only-script</wrapper.distribution.type>
		<!-- jacoco -->
		<jacoco.skip>false</jacoco.skip>
		<jacoco.bundle.instruction.coveredratio>0.65</jacoco.bundle.instruction.coveredratio>
		<jacoco.bundle.branch.coveredratio>0.60</jacoco.bundle.branch.coveredratio>
		<jacoco.bundle.class.missedcount>0</jacoco.bundle.class.missedcount>
		<jacoco.class.line.coveredratio>0.50</jacoco.class.line.coveredratio>
		<!-- release -->
		<maven.release.arguments>${user.release.arguments}</maven.release.arguments>
		<maven.release.preparationProfiles>${user.release.preparationProfiles}</maven.release.preparationProfiles>
		<maven.release.releaseProfiles>${user.release.releaseProfiles}</maven.release.releaseProfiles>
		<maven.release.extraPreparationProfiles/> <!-- Append profiles to maven.release.preparationProfiles, 比如(需要以逗号开始): ,o-tar,env-dev -->
		<maven.release.extraReleaseProfiles/> <!-- Append profiles to maven.release.releaseProfiles 比如: ,o-tar,env-dev-->

		<!-- plugin version -->
		<maven-javadoc-plugin.version>3.5.0</maven-javadoc-plugin.version>
		<maven-deploy-plugin.version>3.0.0</maven-deploy-plugin.version>
		<flatten-maven-plugin.version>1.5.0</flatten-maven-plugin.version>
		<maven-gpg-plugin.version>3.0.1</maven-gpg-plugin.version>
		<versions-maven-plugin.version>2.14.2</versions-maven-plugin.version>
		<maven-wrapper-plugin.version>3.3.2</maven-wrapper-plugin.version>
		<nexus-staging-maven-plugin.version>1.6.13</nexus-staging-maven-plugin.version>
		<maven-checksum-plugin.version>1.10</maven-checksum-plugin.version>
		<maven-release-plugin.version>3.0.1</maven-release-plugin.version>
		<central-publishing-maven-plugin.version>0.7.0</central-publishing-maven-plugin.version>
		<sonar-maven-plugin.version>5.1.0.4751</sonar-maven-plugin.version>
		<maven-jxr-plugin.version>3.3.0</maven-jxr-plugin.version>
		<maven-site-plugin.version>3.12.1</maven-site-plugin.version>
		<maven-project-info-reports-plugin.version>3.6.2</maven-project-info-reports-plugin.version>
		<jacoco-maven-plugin.version>0.8.9</jacoco-maven-plugin.version>
		<gmavenplus-plugin.version>3.0.2</gmavenplus-plugin.version>
		<maven-checkstyle-plugin.version>3.3.1</maven-checkstyle-plugin.version>
		<spring-javaformat-maven-plugin.version>0.0.46</spring-javaformat-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.9</jacoco-maven-plugin.version>
		<git-commit-id-maven-plugin.version>9.0.2</git-commit-id-maven-plugin.version>

		<!-- plugin dependency version -->
		<checkstyle.version>9.3</checkstyle.version>
	</properties>

	<developers>
		<developer>
			<id>${developer.id}</id>
			<name>${developer.name}</name>
			<email>${developer.email}</email>
			<roles>
				<role>Architect</role>
				<role>Developer</role>
			</roles>
		</developer>
	</developers>

	<scm>
		<url>${scm.git.web_url}</url>
		<connection>scm:git:${scm.git.url}</connection>
		<developerConnection>scm:git:${scm.git.url}</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<issueManagement>
		<system>GitHub</system>
		<url>${scm.issue.url}</url>
	</issueManagement>

	<licenses>
		<license>
			<name>GNU General Public License, Version 3</name>
			<url>https://www.gnu.org/licenses/gpl-3.0-standalone.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>io.github.git-commit-id</groupId>
					<artifactId>git-commit-id-maven-plugin</artifactId>
					<version>${git-commit-id-maven-plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>revision</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<!-- 如果没有 Git 目录，不会导致构建失败 -->
						<failOnNoGitDirectory>false</failOnNoGitDirectory>
						<!-- 如果无法提取仓库信息，不会导致构建失败 -->
						<failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
						<!-- 生成 git.properties 文件 -->
						<generateGitPropertiesFile>true</generateGitPropertiesFile>
						<!-- 允许通过 -Dmaven.gitcommitid.skip 跳过 -->
						<skipViaCommandLine>true</skipViaCommandLine>
						<!-- 仅包含指定的属性 -->
						<includeOnlyProperties>
							<includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
							<includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
							<includeOnlyProperty>^git.branch$</includeOnlyProperty>
							<includeOnlyProperty>^git.remote.origin.url$</includeOnlyProperty>
						</includeOnlyProperties>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<source>${java.version}</source>
						<encoding>${project.build.sourceEncoding}</encoding>
						<charset>${javadoc.encoding}</charset>
						<docencoding>${javadoc.encoding}</docencoding>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<goals>
								<goal>jar</goal>
							</goals>
							<configuration>
								<failOnError>false</failOnError>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>${maven-gpg-plugin.version}</version>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
							<configuration>
								<!-- 启用 pinentry-mode loopback 模式需要满足以下条件 -->
								<!-- 1. 确保 gpg version 2.1+ -->
								<!-- 2. 确保 ~/.gnupg/gpg.conf 启用 allow-loopback-pinentry -->
								<gpgArguments>
									<arg>--pinentry-mode</arg>
									<arg>loopback</arg>
								</gpgArguments>
								<useAgent>true</useAgent>
								<keyname>${user.gpg.keyname}</keyname>
								<passphraseServerId>${user.gpg.keyname}</passphraseServerId>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>net.nicoulaj.maven.plugins</groupId>
					<artifactId>checksum-maven-plugin</artifactId>
					<version>${maven-checksum-plugin.version}</version>
					<executions>
						<execution>
							<id>create-checksums</id>
							<goals>
								<goal>artifacts</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>${maven-release-plugin.version}</version>
					<configuration>
						<tagNameFormat>v@{project.version}</tagNameFormat>
						<autoVersionSubmodules>true</autoVersionSubmodules>
						<!--
						scmCommentPrefix: default is [maven-release-plugin]
						scmReleaseCommitComment: default is @{prefix} prepare release @{releaseLabel}
						scmDevelopmentCommitComment: default is @{prefix} prepare for the next development iteration
						-->
						<pushChanges>true</pushChanges>
						<!--
						如果为true, 那么 performRelease 将会为 true
						利用这个特性,可以将这个 performRelease 绑定到通过属性激活的 profile, 以补充 arguments 的不足
						-->
						<useReleaseProfile>false</useReleaseProfile>
						<!-- 指定 release:perform 执行时传递的 maven config, 比如指定 -Pxx,yy -->
						<arguments>${maven.release.arguments}</arguments>

						<preparationProfiles>
							${maven.release.preparationProfiles}${maven.release.extraPreparationProfiles}
						</preparationProfiles>
						<releaseProfiles>${maven.release.releaseProfiles}${maven.release.extraReleaseProfiles}
						</releaseProfiles>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>${versions-maven-plugin.version}</version>
					<configuration>
						<generateBackupPoms>false</generateBackupPoms>
					</configuration>
				</plugin>

				<!-- 解决多模块 revision 版本替换问题 -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>flatten-maven-plugin</artifactId>
					<version>${flatten-maven-plugin.version}</version>
					<configuration>
						<updatePomFile>true</updatePomFile>
						<flattenedPomFilename>${flattened.filename}</flattenedPomFilename>
						<flattenMode>resolveCiFriendliesOnly</flattenMode>
					</configuration>
					<executions>
						<!-- enable flattening -->
						<execution>
							<id>flatten</id>
							<phase>process-resources</phase>
							<goals>
								<goal>flatten</goal>
							</goals>
						</execution>
						<!-- ensure proper cleanup -->
						<execution>
							<id>flatten.clean</id>
							<phase>clean</phase>
							<goals>
								<goal>clean</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${maven-checkstyle-plugin.version}</version>
				</plugin>
				<!--
				NOTES:
				Documents: https://github.com/spring-io/spring-javaformat/?tab=readme-ov-file#enable-the-plugin
				Download IDEA Plugin: https://repo1.maven.org/maven2/io/spring/javaformat/spring-javaformat-intellij-idea-plugin/0.0.45/
				-->
				<plugin>
					<groupId>io.spring.javaformat</groupId>
					<artifactId>spring-javaformat-maven-plugin</artifactId>
					<version>${spring-javaformat-maven-plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>io.github.git-commit-id</groupId>
				<artifactId>git-commit-id-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>coding</id>
			<properties>
				<!-- deploy -->
				<user.altSnapshotDeploymentRepository.artifactory>
					${setting.altSnapshotDeploymentRepository.artifactory}
				</user.altSnapshotDeploymentRepository.artifactory>
				<user.altReleaseDeploymentRepository.artifactory>${setting.altReleaseDeploymentRepository.artifactory}
				</user.altReleaseDeploymentRepository.artifactory>
				<user.altSnapshotDeploymentRepository.central>${setting.altSnapshotDeploymentRepository.central}
				</user.altSnapshotDeploymentRepository.central>
				<!-- archetype -->
				<user.gpg.keyname>${setting.gpg.keyname}</user.gpg.keyname>
				<user.minio.alias>${setting.minio.alias}</user.minio.alias>
				<user.minio.bucket.path>${setting.minio.bucket.path}</user.minio.bucket.path>
				<user.archetype.catalog.upload.url>${setting.archetype.catalog.upload.url}
				</user.archetype.catalog.upload.url>
				<user.archetype.catalog.upload.serverId>${setting.archetype.catalog.upload.serverId}
				</user.archetype.catalog.upload.serverId>
				<!-- docker -->
				<user.docker.build.registry>${setting.docker.build.registry}</user.docker.build.registry>
				<user.docker.build.base_image>${setting.docker.build.base_image}
				</user.docker.build.base_image>
				<user.docker.build.namespace>${setting.docker.build.namespace}</user.docker.build.namespace>
				<!-- jasypt -->
				<user.jasypt.encryptor.password>${setting.jasypt.encryptor.password}</user.jasypt.encryptor.password>
				<!-- code review -->
				<user.sonar.host.url>${setting.sonar.host.url}</user.sonar.host.url>
				<user.sonar.token>${setting.sonar.token}</user.sonar.token>
				<!-- release -->
				<user.release.arguments>${setting.release.arguments}</user.release.arguments>
				<user.release.preparationProfiles>${setting.release.preparationProfiles}
				</user.release.preparationProfiles>
				<user.release.releaseProfiles>${setting.release.releaseProfiles}</user.release.releaseProfiles>
			</properties>
		</profile>
		<!-- 发布到中央仓库 -->
		<!-- https://central.sonatype.com/ -->
		<!-- 该插件的存在无需指定 distributionManagement -->
		<profile>
			<id>publish-central</id>
			<properties>
				<auto.release.enabled>true</auto.release.enabled>
				<auto.layered.enabled>true</auto.layered.enabled>
				<auto.assembly.enabled>false</auto.assembly.enabled>
				<!-- release -->
				<setting.release.preparationProfiles>coding,publish-central</setting.release.preparationProfiles>
				<setting.release.arguments>-DskipTests</setting.release.arguments>
				<setting.release.releaseProfiles>coding,publish-central</setting.release.releaseProfiles>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.sonatype.central</groupId>
						<artifactId>central-publishing-maven-plugin</artifactId>
						<version>${central-publishing-maven-plugin.version}</version>
						<extensions>true</extensions>
						<configuration>
							<publishingServerId>${central.server.id}</publishingServerId>
							<autoPublish>true</autoPublish>
							<waitUntil>published</waitUntil>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>publish-artifactory</id>
			<properties>
				<!-- 有了这两个属性后，工程 pom.xml 可以不需要配置 distributionManagement 了 -->
				<!-- 属性，可使用 -DaltDeploymentRepository=xxxxx 进行覆盖 -->
				<!-- 比如:
				1) 发布快照版本 mvn deploy -DaltDeploymentRepository=artifactory-snapshots::https://artifactory.example.com/artifactory/maven-dev-local
				2) 发布正式版本 mvn deploy -DaltDeploymentRepository=artifactory-releases::https://artifactory.example.com/artifactory/maven-prod-local
				-->
				<altSnapshotDeploymentRepository>${user.altSnapshotDeploymentRepository.artifactory}
				</altSnapshotDeploymentRepository>
				<altReleaseDeploymentRepository>${user.altReleaseDeploymentRepository.artifactory}
				</altReleaseDeploymentRepository>
				<!-- 是否要激活上传 archetype-catalog.xml 到 artifactory 等 -->
				<auto.archetype.catalog.artifactory>true</auto.archetype.catalog.artifactory>
				<!-- 是否要激活上传 archetype-catalog.xml 到 minio 等 -->
				<auto.archetype.catalog.minio>false</auto.archetype.catalog.minio>
				<!-- release -->
				<setting.release.preparationProfiles>coding,o-release,publish-artifactory
				</setting.release.preparationProfiles>
				<setting.release.arguments>-DskipTests -Dgpg.skip=true</setting.release.arguments>
				<setting.release.releaseProfiles>coding,o-release,publish-artifactory</setting.release.releaseProfiles>
			</properties>
		</profile>
		<profile>
			<id>publish-harbor</id>
			<properties>
				<auto.layered.enabled>true</auto.layered.enabled>
				<auto.jib.dockerBuild.enabled>true</auto.jib.dockerBuild.enabled>
				<maven.deploy.skip>true</maven.deploy.skip>
				<!-- release -->
				<setting.release.preparationProfiles>coding,o-release,publish-harbor
				</setting.release.preparationProfiles>
				<setting.release.arguments>-DskipTests -Dgpg.skip=true</setting.release.arguments>
				<setting.release.releaseProfiles>coding,o-release,publish-harbor</setting.release.releaseProfiles>
			</properties>
		</profile>
		<profile>
			<!-- 为了加快构建速度 -->
			<!-- 对于 source jar, javadoc, asc, md5 这些构件信息 -->
			<!-- 只针对涉及发布到远程仓库时, 才激活, 比如 profile publish-* 激活时将自动激活 -->
			<id>auto-release</id>
			<activation>
				<property>
					<name>auto.release.enabled</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>versions-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>
					<!-- 一定要先签名,再生成校验文件 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>net.nicoulaj.maven.plugins</groupId>
						<artifactId>checksum-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-release-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- mvn clean verify sonar:sonar -Pcoding,unit-test,code-review -->
		<profile>
			<id>code-review</id>
			<properties>
				<sonar.host.url>${user.sonar.host.url}</sonar.host.url>
				<sonar.token>${user.sonar.token}</sonar.token>
				<sonar.qualitygate.wait>true</sonar.qualitygate.wait>
				<!--
				sonar.login is deprecated and will be removed in the future
				=========================================================================
									Version Compatibility Matrix
				=========================================================================
				JDK	|	SonarQube Server		|	sonar-maven-plugin
				8	|	v8.0 - v8.9				|	<=3.11.0.3922 11	|	v8.9 and v10.0 - v10.5	|	3.11.x - 4.0.x 17	|	v9.x, v10.x and later	|	4.0.x for v10.0-v10.5 / 5.x for v10.6+
				=========================================================================
				-->
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>io.spring.javaformat</groupId>
						<artifactId>spring-javaformat-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>validate</phase>
								<inherited>true</inherited>
								<goals>
									<goal>validate</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>com.puppycrawl.tools</groupId>
								<artifactId>checkstyle</artifactId>
								<version>${checkstyle.version}</version>
							</dependency>
							<dependency>
								<groupId>io.spring.javaformat</groupId>
								<artifactId>spring-javaformat-checkstyle</artifactId>
								<version>${spring-javaformat-maven-plugin.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>checkstyle-validation</id>
								<phase>validate</phase>
								<configuration>
									<configLocation>${checkstyle.config.location}</configLocation>
									<propertyExpansion>${checkstyle.property.expansion}</propertyExpansion>
									<includeTestSourceDirectory>true</includeTestSourceDirectory>
								</configuration>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
		单元测试 + 覆盖率
		mvn clean verify -Pcoding,unit-test
		-->
		<profile>
			<id>unit-test</id>
			<properties>
				<maven.test.skip>false</maven.test.skip>
			</properties>
			<build>
				<plugins>
					<!-- 编译 Groovy 代码 -->
					<plugin>
						<groupId>org.codehaus.gmavenplus</groupId>
						<artifactId>gmavenplus-plugin</artifactId>
						<version>${gmavenplus-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>compile</goal>
									<goal>compileTests</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- 运行基于 Junit 或 Spock 等框架的单元测试 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${maven-surefire-plugin.version}</version>
						<configuration>
							<!-- 并行执行 -->
							<parallel>methods</parallel>
							<threadCount>10</threadCount>
							<!-- 出现失败继续生成报告 -->
							<testFailureIgnore>true</testFailureIgnore>
							<!-- 避免某些 Groovy 反射问题 -->
							<useSystemClassLoader>false</useSystemClassLoader>
							<skipTests>false</skipTests>
							<includes>
								<include>**/*Test.java</include>
								<include>**/*Spec.groovy</include>
							</includes>
							<excludes>
								<exclude>**/*IT</exclude>
								<exclude>**/*ITCase</exclude>
							</excludes>
						</configuration>
					</plugin>
					<!-- 收集代码覆盖率并生成报告 -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-maven-plugin.version}</version>
						<configuration>
							<!-- 可以通过激活 skip-jacoco profile 来跳过 jacoco 执行 -->
							<skip>${jacoco.skip}</skip>
						</configuration>
						<executions>
							<execution>
								<!-- 初始化时附加 agent -->
								<id>prepare-agent</id>
								<phase>initialize</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${project.build.directory}/jacoco-ut.exec</destFile>
								</configuration>
							</execution>
							<execution>
								<id>report-and-check</id>
								<phase>verify</phase>
								<goals>
									<goal>report</goal>
									<goal>check</goal>
								</goals>
								<configuration>
									<dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>
									<!--
									1. Available element type (represent the scope of each rule):
									1) BUNDLE: All classes in the Maven module combined will be checked against the rule
									2) PACKAGE: each java package
									3) CLASS: Each Class file will be checked against the rule
									4) SOURCEFILE: Each Java file will be checked against the rule
									5) METHOD: each method will be checked against the rule
									-->
									<rules>
										<!-- rule1: 模块级门槛 -->
										<rule>
											<element>BUNDLE</element>
											<limits>　　
												<limit>
													<counter>INSTRUCTION</counter>
													<value>COVEREDRATIO</value>
													<minimum>${jacoco.bundle.instruction.coveredratio}</minimum>
												</limit>
												<limit>
													<counter>BRANCH</counter>
													<value>COVEREDRATIO</value>
													<minimum>${jacoco.bundle.branch.coveredratio}</minimum>
												</limit>
												<limit>
													<counter>CLASS</counter>
													<value>MISSEDCOUNT</value>
													<maximum>${jacoco.bundle.class.missedcount}</maximum>
												</limit>
											</limits>
										</rule>
										<!-- rule2: 类级门槛 -->
										<rule>
											<element>CLASS</element>
											<excludes>
												<exclude>*Exception*</exclude>
												<exclude>*Application</exclude>
												<exclude>*Config*</exclude>
												<exclude>*Properties</exclude>
											</excludes>
											<limits>
												<limit>
													<counter>LINE</counter>
													<value>COVEREDRATIO</value>
													<minimum>${jacoco.class.line.coveredratio}</minimum>
												</limit>
											</limits>
										</rule>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- mvn clean verify site -Pcoding,unit-test,site-aggregate -->
		<!-- 报告位置:
		1. 在 <项目根目录>/target/staging/index.html
		2. 在 <项目根目录>/target/staging/surefire-report.html -->
		<profile>
			<id>site-aggregate</id>
			<distributionManagement>
				<site>
					<id>site</id>
					<!--suppress UnresolvedMavenProperty -->
					<url>file:${session.executionRootDirectory}/target/staging</url>
				</site>
			</distributionManagement>
			<build>
				<plugins>
					<!-- JaCoCo 聚合报告 -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-maven-plugin.version}</version>
						<configuration>
							<!-- 可以通过激活 skip-jacoco profile 来跳过 jacoco 执行 -->
							<skip>${jacoco.skip}</skip>
						</configuration>
						<executions>
							<execution>
								<id>report-aggregate</id>
								<phase>verify</phase>
								<goals>
									<goal>report-aggregate</goal>
								</goals>
								<configuration>
									<outputDirectory>${session.executionRootDirectory}/target/staging/jacoco-aggregate
									</outputDirectory>
									<dataFileIncludes>
										<dataFileInclude>**/jacoco-ut.exec</dataFileInclude>
									</dataFileIncludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- 执行 Checkstyle 检查 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<version>${maven-checkstyle-plugin.version}</version>
						<dependencies>
							<dependency>
								<groupId>com.puppycrawl.tools</groupId>
								<artifactId>checkstyle</artifactId>
								<version>${checkstyle.version}</version>
							</dependency>
							<dependency>
								<groupId>io.spring.javaformat</groupId>
								<artifactId>spring-javaformat-checkstyle</artifactId>
								<version>${spring-javaformat-maven-plugin.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<configLocation>${checkstyle.config.location}</configLocation>
							<propertyExpansion>${checkstyle.property.expansion}</propertyExpansion>
							<consoleOutput>true</consoleOutput>
							<failsOnError>false</failsOnError>
							<linkXRef>true</linkXRef>
						</configuration>
						<executions>
							<execution>
								<id>checkstyle</id>
								<phase>verify</phase>
								<goals>
									<goal>checkstyle</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- 站点生成(site + stage) -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-site-plugin</artifactId>
						<version>${maven-site-plugin.version}</version>
						<configuration>
							<skip>false</skip>
							<!-- ensure all modules stage their site documentation to a single location, preventing the duplicate directory structure -->
							<stagingDirectory>${session.executionRootDirectory}/target/staging</stagingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>attach-site</id>
								<phase>site</phase>
								<goals>
									<goal>site</goal>
									<goal>stage</goal>
								</goals>
							</execution>
							<!-- 添加一个新的执行，确保在所有子模块处理完后，再次以非递归方式执行根项目的 stage -->
							<execution>
								<id>stage-root-only</id>
								<phase>post-site</phase>
								<goals>
									<goal>stage</goal>
								</goals>
								<!-- 确保该执行不被子模块继承 -->
								<inherited>false</inherited>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<reporting>
				<plugins>
					<!-- 生成聚合单元测试报告 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-report-plugin</artifactId>
						<version>${maven-surefire-plugin.version}</version>
						<configuration>
							<aggregate>true</aggregate>
						</configuration>
					</plugin>
					<!-- 生成测试报告时链接到测试源代码的交叉引用（XRef） -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jxr-plugin</artifactId>
						<version>${maven-jxr-plugin.version}</version>
						<reportSets>
							<reportSet>
								<reports>
									<report>aggregate</report>
									<report>test-aggregate</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-project-info-reports-plugin</artifactId>
						<version>${maven-project-info-reports-plugin.version}</version>
					</plugin>
					<!-- 生成聚合 Javadoc 报告 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>${maven-javadoc-plugin.version}</version>
						<reportSets>
							<reportSet>
								<id>aggregate</id>
								<reports>
									<report>aggregate</report>
								</reports>
							</reportSet>
						</reportSets>
						<configuration>
							<source>${java.version}</source>
							<encoding>${project.build.sourceEncoding}</encoding>
							<charset>${javadoc.encoding}</charset>
							<docencoding>${javadoc.encoding}</docencoding>
							<failOnError>false</failOnError>
						</configuration>
					</plugin>
					<!-- 生成 Checkstyle 报告 -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<version>${maven-checkstyle-plugin.version}</version>
						<configuration>
							<configLocation>${checkstyle.config.location}</configLocation>
							<propertyExpansion>${checkstyle.property.expansion}</propertyExpansion>
							<consoleOutput>false</consoleOutput>
							<failsOnError>false</failsOnError>
							<linkXRef>true</linkXRef>
						</configuration>
						<reportSets>
							<reportSet>
								<id>checkstyle-aggregate</id>
								<reports>
									<report>checkstyle</report>
									<report>checkstyle-aggregate</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
				</plugins>
			</reporting>
		</profile>

		<profile>
			<id>o-wrapper</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-wrapper-plugin</artifactId>
						<version>${maven-wrapper-plugin.version}</version>
						<configuration>
							<mavenVersion>${wrapper.maven.version}</mavenVersion>
							<distributionType>${wrapper.distribution.type}</distributionType>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
