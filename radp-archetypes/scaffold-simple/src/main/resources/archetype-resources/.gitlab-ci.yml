############################################## inputs ##################################################################
spec:
  inputs:
    debug_mode:
      description: '是否打印更多调试日志'
      type: boolean
      default: true
    environment:
      type: string
      options: [ '', 'dev', 'sit', 'uat', 'prod', 'local' ]
      default: ''
    runner_tags:
      description: 'All jobs default runner tags'
      type: string
      options:
        # docker executor
        - docker
        - docker-arm64
        - docker-dind
        - docker-dood
        - docker-rootless
        # shell executor
        - shell
        - shell-arm64
        - shell-ubuntu
        - shell-ubuntu-arm64
        - shell-amd64
        - shell-centos
        - shell-centos-amd64
        # kubernetes executor
        - kubernetes
        - k8s
        - k8s-amd64
        - k8s-arm64
      default: 'k8s'
    version_type:
      type: string
      options: [ 'timestamp', 'patch', 'minor', 'major' ]
      default: 'timestamp'

---
############################################## includes ################################################################
include:
  - project: coding/homelab/gitlab-ci-templates
    ref: main
    file: templates/pipelines/feature/lang/java.yml
    inputs:
      debug_mode: $[[ inputs.debug_mode ]]
      environment: $[[ inputs.environment ]]
      version_type: $[[ inputs.version_type ]]
      runner_tags: $[[ inputs.runner_tags ]]

############################################## variables ###############################################################
# 预定义变量 https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
variables:
  TP_BASE_IMAGE: "maven:3.9.9-eclipse-temurin-17"

  #====================================================================================================================#
  #============================================= [p] Parent Pipeline ==================================================#
  #====================================================================================================================#
  #--------------------------------------------- [p-1] prepare args ---------------------------------------------------#
  TP_PREPARE_SCRIPT_REF: main                               # 可选: 指定使用哪个分支的脚本，如果未指定，将尝试获取最新的tag，如果没有tag则使用main. 默认为 [environment-]x.y.x, 如果 environment 指定了 prod, 则 tag 为 prod-1.0.0; 否则为 1.0.0
  TP_PREPARE_SCRIPT_REF_TYPE: branch

  #--------------------------------------------- [p-2] trigger args ---------------------------------------------------#
  TP_CHILD_PIPELINE_TEMPLATE_REF: $TP_PREPARE_SCRIPT_REF    # 用于指定子流水线使用的模板版本，默认使用 gitlab-ci-templates main 分支

  # 1) 子作业流控制
  TP_TRIGGER_CHILD_PIPELINE_LANGE: "true"                   # [c/1] 指定是否启用子流水线: lang_pipeline

  # 2) 作业控制: 子作业流 lang_pipeline
  TP_RUN_LINT: "true"                                       # [c/1-1] 是否启用代码评审阶段
  TP_RUN_UNIT_TEST: "true"                                  # [c/1-2] 是否启用单元测试阶段
  TP_RUN_SONARQUBE: "true"                                  # [c/1-3] 是否启用质量门阶段
  TP_RUN_BUILD: "false"                                     # [c/1-4] 是否启用构建阶段
  TP_RUN_PACKAGE: "false"                                   # [c/1-5] 是否启用打包阶段
  TP_RUN_PUBLISH: "false"                                   # [c/1-6] 是否启用制品发布阶段
  TP_RUN_PAGES: "false"                                     # [c/1-7] 是否启用pages阶段
  TP_RUN_DEPLOY: "false"                                    # [c/1-8] 是否启用部署阶段
  TP_RUN_RELEASE: "true"                                    # [c/1-9] 是否启用打版阶段
  TP_RUN_SUMMARY: "false"                                   # [c/1-10] 是否启用汇总制品阶段

  # 说明: (code-review = lint + unit_test + sonarqube)
  # 如果 mr target branch 在这个列表中, 将触发 code-review 相关 Jobs
  TP_WORKFLOW_RULE_BRANCHES_MR: '/^(master|develop|main|future|feat\/public\/.+)$/'
  TP_WORKFLOW_RULE_BRANCHES_RELEASE: '/^(master|develop|main|future)$/'

  #====================================================================================================================#
  #--------------------------------------------- [c] Child Pipeline ---------------------------------------------------#
  #====================================================================================================================#
  #--------------------------------------------- 缓存 ------------------------------------------------------------------#
  # 全局缓存
  TP_GLOBAL_CACHE_NAME: global-${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}
  TP_GLOBAL_CACHE_DIR: ''

  #============================================= [c/1] Lang Pipeline ==================================================#
  #--------------------------------------------- [c/1-1] lint args ----------------------------------------------------#
  TP_LINT_IMAGE: $TP_BASE_IMAGE
  TP_LINT_SHELL: "$DF_LINT_BASE_SHELL --settings .mvn/settings.xml -Pcoding,code-review,repo-artifactory"

  #--------------------------------------------- [c/1-2] unit-test args -----------------------------------------------#
  TP_UNIT_TEST_IMAGE: $TP_BASE_IMAGE
  TP_UNIT_TEST_SHELL: "$DF_UNIT_TEST_BASE_SHELL jacoco:report-aggregate \
                -ntp --settings .mvn/settings.xml \
                -Pcoding,unit-test,env-test,repo-artifactory \
                -Dapp.server.port=0 \
                -Dapp.management.server.port=0" # 如果是多模块项目在 TP_UNIT_TEST_SHELL 中加上 jacoco:report-aggregate

  #--------------------------------------------- [c/1-3] sonarqube args -----------------------------------------------#
  TP_SONARQUBE_IMAGE: $DF_SONARQUBE_IMAGE
  TP_SONARQUBE_CHECK_SHELL: "$DF_SONARQUBE_BASE_SHELL -ntp --settings .mvn/settings.xml -Pcoding,code-review,repo-artifactory"
  TP_SONARQUBE_USER_HOME: "$DF_SONARQUBE_USER_HOME"

  #--------------------------------------------- [c/1-4] build args ---------------------------------------------------#
  TP_BUILD_IMAGE: $TP_BASE_IMAGE
  TP_BUILD_ARTIFACT_PATH: ""
  TP_BUILD_SHELL: "$DF_BUILD_BASE_SHELL -ntp --settings .mvn/settings.xml -Pcoding,repo-artifactory"

  #--------------------------------------------- [c/1-5] package args -------------------------------------------------#
  TP_PACKAGE_IMAGE: $TP_BASE_IMAGE
  TP_PACKAGE_ARTIFACT_PATH: "$DF_PACKAGE_ARTIFACT_PATH"
  TP_PACKAGE_SHELL: "$DF_PACKAGE_BASE_SHELL -ntp --settings .mvn/settings.xml -Pcoding,o-tar,env-$TP_RUNTIME_ENV,repo-artifactory"

  #--------------------------------------------- [c/1-6] publish args -------------------------------------------------#
  TP_PUBLISH_TYPE: maven                                                                    # support maven/dind_tcp/dind_tls/dind_socket/dood/docker_rootless, 使用逗号分隔多个

  # 1-6-1 publish-by-maven args
  TP_PUBLISH_BY_MAVEN_IMAGE: $TP_BASE_IMAGE
  TP_PUBLISH_BY_MAVEN_SHELL: "$DF_PUBLISH_BY_MAVEN_BASE_SHELL \
                  -DskipTests \
                  -Dauto.release.enabled=false \
                  -Dauto.archetype.catalog.minio=false \
                  -ntp --settings .mvn/settings.xml \
                  -Pcoding,publish-artifactory,env-$TP_RUNTIME_ENV"

  # 1-6-2 publish-by-docker args
  TP_PUBLISH_DOCKER_BUILD_TOOL: $DF_PUBLISH_DOCKER_BUILD_TOOL                               # support buildx/buildctl/buildctl-daemonless
  TP_PUBLISH_DOCKER_BUILD_PLATFORMS: $DF_PUBLISH_DOCKER_BUILD_PLATFORMS                     # 逗号分隔多架构, 如: linux/amd64,linux/arm64
  TP_PUBLISH_DOCKER_BUILD_CONTEXT_DIR: $DF_PUBLISH_DOCKER_BUILD_CONTEXT_DIR                 # docker 构建上下文
  TP_PUBLISH_DOCKER_DOCKERFILE: "Dockerfile"                                                # Dockerfile
  TP_PUBLISH_DOCKER_BUILD_CACHE_REGISTRY_REF: $DF_PUBLISH_DOCKER_BUILD_CACHE_REGISTRY_REF   # build cache from/to registry
  # image reference: [registry/][namespace/]repository:[tag][@digest]
  TP_PUBLISH_DOCKER_REGISTRIES: $PRIVATE_REGISTRY_B64                                       # 逗号分隔的 base64 encode registry，例如: "base64(registry1.com),base64(docker.io)"
  TP_PUBLISH_DOCKER_REGISTRY_USERNAMES: $DF_PUBLISH_DOCKER_REGISTRY_USERNAMES               # 逗号风格的 base64 encode registry usernames
  TP_PUBLISH_DOCKER_REGISTRY_PASSWORDS: $DF_PUBLISH_DOCKER_REGISTRY_PASSWORDS               # 逗号风格的 base64 encode registry passwords
  TP_PUBLISH_DOCKER_BUILD_IMAGE_NAMESPACES: "${imageNamespace}/${TP_RUNTIME_ENV}"           # 对应每个registry的namespace，例如: "ns1,ns2,ns3"
  TP_PUBLISH_DOCKER_BUILD_IMAGE_REPOSITORY: $DF_PUBLISH_DOCKER_BUILD_IMAGE_REPOSITORY       # image repository name
  TP_PUBLISH_DOCKER_BUILD_IMAGE_ADDITIONAL_TAGS: ""                                         # 额外的标签，逗号分隔
  TP_PUBLISH_DOCKER_BUILD_ARGS: $DF_PUBLISH_DOCKER_BUILD_ARGS                               # 构建参数，格式: "ARG1=value1,ARG2=value2,ARG3=value3"
  TP_PUBLISH_DOCKER_BUILD_ARGS_FROM_ENV: $DF_PUBLISH_DOCKER_BUILD_ARGS_FROM_ENV             # 从环境变量自动传入的构建参数，格式: "CI_COMMIT_SHA,CI_COMMIT_TAG,CI_PROJECT_NAME"

  # 1-6-3 publish-by-curl args
  TP_PUBLISH_BY_CURL_IMAGE: $DF_PUBLISH_BY_CURL_IMAGE
  TP_PUBLISH_BY_CURL_TARGET_BASE_URL: $DF_PUBLISH_BY_CURL_TARGET_BASE_URL                   #制品库地址
  TP_PUBLISH_BY_CURL_TARGET_BASE_PATH: $DF_PUBLISH_BY_CURL_TARGET_BASE_PATH                 #发布制品到制品库的目标仓库ID
  TP_PUBLISH_BY_CURL_TARGET_FILE_PATH: $DF_PUBLISH_BY_CURL_TARGET_FILE_PATH                 #发布制品到制品库制品位置(目录结构)
  TP_PUBLISH_BY_CURL_TARGET_FILENAME: $DF_PUBLISH_BY_CURL_TARGET_FILENAME                   #目标制品名称(如果不指定或为空, 将与源文件名保持一致)
  TP_PUBLISH_BY_CURL_SOURCE_FILE: $DF_PUBLISH_BY_CURL_SOURCE_FILE                           #制品路径(相对于项目根目录的相对路径)
  TP_PUBLISH_BY_CURL_AUTH_USER: $DF_PUBLISH_BY_CURL_AUTH_USER                               #制品库用户
  TP_PUBLISH_BY_CURL_AUTH_PASSWD: $DF_PUBLISH_BY_CURL_AUTH_PASSWD                           #制品库密码

  #--------------------------------------------- [c/1-7] pages args ---------------------------------------------------#
  # 发布 pages - writerside
  TP_PAGES_TYPE: "writerside"
  TP_WRITERSIDE_INSTANCE: "Writerside/${appName}"

  #--------------------------------------------- [c/1-8] deploy args --------------------------------------------------#

  #--------------------------------------------- [c/1-9] release args -------------------------------------------------#
  TP_RELEASE_TAG_PREFIX: $TP_RUNTIME_ENV
  TP_RELEASE_TAG_SEARCH: $TP_RELEASE_TAG_PREFIX

  TP_RELEASE_PREPARE_SHELL: "$DF_RELEASE_PREPARE_BASE_SHELL -ntp --settings .mvn/settings.xml -DskipTests -Pcoding,publish-artifactory,o-release"
  TP_RELEASE_PERFORM_SHELL: "$DF_RELEASE_PERFORM_BASE_SHELL -ntp --settings .mvn/settings.xml -DskipTests -Pcoding,env-$TP_RUNTIME_ENV,publish-artifactory,o-release"
  TP_RELEASE_ROLLBACK_SHELL: "$DF_RELEASE_ROLLBACK_BASE_SHELL -ntp --settings .mvn/settings.xml"

  #--------------------------------------------- [c/1-10] summary args ------------------------------------------------#
  # 制品汇总到目标工程
  TP_SUMMARY_PROJECT_NAME: $DF_SUMMARY_PROJECT_NAME                       # 制品汇总工程 project name
  TP_SUMMARY_PROJECT_ID: $DF_SUMMARY_PROJECT_ID                           # 制品汇总工程 project id
  TP_SUMMARY_PROJECT_TOKEN: $DF_SUMMARY_PROJECT_TOKEN                     # 制品汇总工程 Access Token, scope=api
  TP_SUMMARY_PROJECT_TARGET_REF: $DF_SUMMARY_PROJECT_TARGET_REF           # 制品汇总工程 target ref, tag 将会创建在这里
  # 制品上传
  TP_SUMMARY_ARTIFACT_UPLOAD_METHOD: $DF_SUMMARY_ARTIFACT_UPLOAD_METHOD   # 制品上传目标，gitlab_packages/jfrog/original
  # 制品上传目标制品库 - jfrog
  TP_SUMMARY_JFROG_GENERIC_REPO_NAME: $DF_JFROG_GENERIC_REPO_NAME
  TP_SUMMARY_JFROG_USERNAME: $DF_JFROG_USERNAME
  TP_SUMMARY_JFROG_PASSWORD: $DF_JFROG_PASSWORD
